version: 2.1


# -------------------------------------------------------------------------------------
# Executors
# -------------------------------------------------------------------------------------
executors:
  gpu_cuda10:
    environment:
      CUDA_VERSION: "10.2"
      CUDA_HOME: "/usr/local/cuda"
      PYTHONUNBUFFERED: 1
    machine:
      image: ubuntu-2004:202107-02
    resource_class: gpu.nvidia.small.multi # NVIDIA Tesla T4 2 GPU 4 vCPUs 15 GB RAM

  gpu_cuda11:
    environment:
      CUDA_VERSION: "11.4"
      CUDA_HOME: "/usr/local/cuda"
      PYTHONUNBUFFERED: 1
    machine:
      image: ubuntu-2004:202107-02
    resource_class: gpu.nvidia.small.multi # NVIDIA Tesla T4 2 GPU 4 vCPUs 15 GB RAM

# -------------------------------------------------------------------------------------
# Re-usable commands
# -------------------------------------------------------------------------------------
update_and_install_python: &update_and_install_python
  - run:
      name: "Preparing environment: python"
      command: |
        sudo add-apt-repository -y ppa:deadsnakes/ppa
        sudo apt-get update
        sudo apt-get install -y python3.7 python3.7-dev python3.8 python3.8-dev

install_nox: &install_nox
  - run:
      name: "Preparing environment: nox"
      command: |
        sudo apt-get install -y expect
        sudo pip install nox==2020.8.22

install_suitesparse: &install_suitesparse
  - run:
      name: "Preparing environment: suitesparse"
      command: |
        sudo apt-get install -y libsuitesparse-dev

setup_cuda10_libs: &setup_cuda10_libs
  - run:
      name: Setup CUDA drivers and libraries
      working_directory: ~/
      command: |
        # ubuntu's default gcc9.3 is too recent for cuda10.2
        sudo apt-get install -y gcc-8 g++-8
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 10
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 20
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 20
        # download and install nvidia drivers, cuda, etc
        wget --quiet --no-clobber -P ~/nvidia-downloads https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run
        time sudo /bin/bash nvidia-downloads/cuda_10.2.89_440.33.01_linux.run --no-drm --silent --driver --toolkit
        sudo ldconfig /usr/local/cuda/lib64
        echo "Done installing NVIDIA drivers and CUDA libraries."
        nvidia-smi

setup_cuda11_libs: &setup_cuda11_libs
  - run:
      name: Setup CUDA drivers and libraries
      working_directory: ~/
      command: |
        # download and install nvidia drivers, cuda, etc
        wget --quiet --no-clobber -P ~/nvidia-downloads https://developer.download.nvidia.com/compute/cuda/11.4.2/local_installers/cuda_11.4.2_470.57.02_linux.run
        time sudo /bin/bash nvidia-downloads/cuda_11.4.2_470.57.02_linux.run --no-drm --silent --driver --toolkit
        sudo ldconfig /usr/local/cuda/lib64
        echo "Done installing NVIDIA drivers and CUDA libraries."
        nvidia-smi

setup_project: &setup_project
  - run:
      name: Setup project dependencies
      working_directory: ~/project
      command: |
        virtualenv ~/theseus_venv -p /usr/bin/python3.7
        echo ". ~/theseus_venv/bin/activate" >> $BASH_ENV
        . ~/theseus_venv/bin/activate
        pip install --progress-bar off --upgrade pip
        pip install --progress-bar off --upgrade setuptools
        pip install --progress-bar off torch==1.9.0+cu102 torchvision torchaudio -f https://download.pytorch.org/whl/torch_stable.html
        python -c 'import torch; print("Torch version:", torch.__version__); assert torch.cuda.is_available()'
        pip install --progress-bar off -e .

# -------------------------------------------------------------------------------------
# Jobs
# -------------------------------------------------------------------------------------
jobs:
  py37_linux:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_nox
      - run:
          name: "Testing theseus"
          command: |
              export NOX_PYTHON_VERSIONS=3.7
              pip install nox==2020.8.22
              nox

  py38_linux:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_nox
      - run:
          name: "Testing theseus"
          command: |
              export NOX_PYTHON_VERSIONS=3.8
              pip install nox==2020.8.22
              nox

  unittests_gpu17_cuda10:
    executor: gpu_cuda10
    steps:
      - checkout
      - <<: *update_and_install_python
      - <<: *install_suitesparse
      - <<: *setup_cuda10_libs
      - <<: *setup_project
      - run:
          name: Run GPU tests
          command: |
            pytest -s theseus/tests/test_theseus_layer.py
            pytest -s theseus/extlib/test_mat_mult.py
            pytest -s theseus/extlib/test_cusolver_lu_solver.py

  unittests_gpu17_cuda11:
    executor: gpu_cuda11
    steps:
      - checkout
      - <<: *update_and_install_python
      - <<: *install_suitesparse
      - <<: *setup_cuda11_libs
      - <<: *setup_project
      - run:
          name: Run GPU tests
          command: |
            pytest -s theseus/tests/test_theseus_layer.py
            pytest -s theseus/extlib/test_mat_mult.py
            pytest -s theseus/extlib/test_cusolver_lu_solver.py


workflows:
  version: 2
  build:
    jobs:
      - py37_linux
      - py38_linux
      - unittests_gpu17_cuda10
      - unittests_gpu17_cuda11