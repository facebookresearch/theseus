version: 2.1


# -------------------------------------------------------------------------------------
# Executors
# -------------------------------------------------------------------------------------
executors:
  gpu_cuda10:
    environment:
      CUDA_VERSION: "10.2"
      CUDA_HOME: "/usr/local/cuda"
      PYTHONUNBUFFERED: 1
    machine:
      image: ubuntu-2004:202107-02
    resource_class: gpu.nvidia.small.multi # NVIDIA Tesla T4 2 GPU 4 vCPUs 15 GB RAM

  gpu_cuda11:
    environment:
      CUDA_VERSION: "11.4"
      CUDA_HOME: "/usr/local/cuda"
      PYTHONUNBUFFERED: 1
    machine:
      image: ubuntu-2004:202107-02
    resource_class: gpu.nvidia.small.multi # NVIDIA Tesla T4 2 GPU 4 vCPUs 15 GB RAM

# -------------------------------------------------------------------------------------
# Re-usable commands
# -------------------------------------------------------------------------------------
update_and_install_python: &update_and_install_python
  - run:
      name: "Preparing environment: python"
      command: |
        sudo add-apt-repository -y ppa:deadsnakes/ppa
        sudo apt-get update
        sudo apt-get install -y python3.9 python3.9-dev

update_and_install_conda: &update_and_install_conda
  - run:
      name: "Preparing environment: python"
      command: |
        wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
        /bin/bash ~/miniconda.sh -b -p ~/conda

install_suitesparse: &install_suitesparse
  - run:
      name: "Preparing environment: suitesparse"
      command: |
        sudo apt-get update && sudo apt-get install -y libsuitesparse-dev

setup_cuda10_libs: &setup_cuda10_libs
  - run:
      name: Setup CUDA 10 drivers and libraries
      working_directory: ~/
      command: |
        # ubuntu's default gcc9.3 is too recent for cuda10.2
        sudo apt-get install -y gcc-8 g++-8
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 10
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 20
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 10
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 20
        sudo update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc /usr/bin/x86_64-linux-gnu-gcc-9 10
        sudo update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc /usr/bin/x86_64-linux-gnu-gcc-8 20
        sudo update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ /usr/bin/x86_64-linux-gnu-g++-9 10
        sudo update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ /usr/bin/x86_64-linux-gnu-g++-8 20
        # download and install nvidia drivers, cuda, etc
        wget --quiet --no-clobber -P ~/nvidia-downloads https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run
        time sudo /bin/bash nvidia-downloads/cuda_10.2.89_440.33.01_linux.run --no-drm --silent --driver --toolkit
        sudo ldconfig /usr/local/cuda/lib64
        echo "Done installing NVIDIA drivers and CUDA libraries."
        nvidia-smi

setup_cuda11_libs: &setup_cuda11_libs
  - run:
      name: Setup CUDA 11 drivers and libraries
      working_directory: ~/
      command: |
        # download and install nvidia drivers, cuda, etc
        wget --quiet --no-clobber -P ~/nvidia-downloads https://developer.download.nvidia.com/compute/cuda/11.7.1/local_installers/cuda_11.7.1_515.65.01_linux.run
        time sudo /bin/bash nvidia-downloads/cuda_11.7.1_515.65.01_linux.run --no-drm --silent --driver --toolkit
        sudo ldconfig /usr/local/cuda/lib64
        echo "Done installing NVIDIA drivers and CUDA libraries."
        nvidia-smi

setup_environment: &setup_environment
  - run:
      name: Setup virtualenv and tools
      working_directory: ~/project
      command: |
        virtualenv ~/theseus_venv -p /usr/bin/python3.9
        echo ". ~/theseus_venv/bin/activate" >> $BASH_ENV
        . ~/theseus_venv/bin/activate
        pip install --progress-bar off --upgrade pip
        pip install --progress-bar off --upgrade setuptools

setup_environment_310: &setup_environment_310
  - run:
      name: Setup virtualenv and tools
      working_directory: ~/project
      command: |
        export PATH=~/conda/bin:$PATH
        conda create --name theseus python=3.10
        source activate theseus
        pip install --progress-bar off --upgrade pip
        pip install --progress-bar off --upgrade setuptools

install_torch_cuda10: &install_torch_cuda10
  - run:
      name: Install Torch for cuda10
      working_directory: ~/project
      command: |
        pip install --progress-bar off torch==1.12.1+cu102 torchvision==0.13.1+cu102 torchaudio==0.12.1+cu102 -f https://download.pytorch.org/whl/cu102/torch_stable.html
        python -c 'import torch; print("Torch version:", torch.__version__); assert torch.cuda.is_available()'

install_torch_cuda11: &install_torch_cuda11
  - run:
      name: Install Torch for cuda11
      working_directory: ~/project
      command: |
        pip install --progress-bar off torch==1.13.0 torchvision==0.14.0 torchaudio==0.13.0 --extra-index-url https://download.pytorch.org/whl/cu117
        python -c 'import torch; print("Torch version:", torch.__version__); assert torch.cuda.is_available()'

install_functorch_021: &install_functorch_021
  - run:
      name: Install Functorch
      working_directory: ~/project
      command: |
        pip install functorch==0.2.1

install_torch: &install_torch
  - run:
      name: Install Torch
      working_directory: ~/project
      command: |
        pip install torch

install_recent_cmake_2004: &install_recent_cmake_2004
  - run:
      name: Installing recent CMake
      working_directory: ~/
      command: |
        (lsb_release -c | grep focal) || (echo "Wrong Ubuntu, expected focal"; exit 1)
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
        sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'
        sudo apt-get update
        sudo apt-get install -y cmake

build_baspacho_cpu: &build_baspacho_cpu
  - run:
      name: Install BaSpaCho (CPU)
      working_directory: ~/
      command: |
        sudo apt-get install -y libopenblas-pthread-dev
        git clone https://github.com/facebookresearch/baspacho.git
        cd baspacho
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBLA_STATIC=ON \
          -DBASPACHO_USE_CUBLAS=0 -DBUILD_SHARED_LIBS=OFF \
          -DBASPACHO_BUILD_TESTS=OFF -DBASPACHO_BUILD_EXAMPLES=OFF
        cmake --build build -- -j16

build_baspacho_cuda: &build_baspacho_cuda
  - run:
      name: Install BaSpaCho (CUDA)
      working_directory: ~/
      command: |
        sudo apt-get install -y libopenblas-pthread-dev
        git clone https://github.com/facebookresearch/baspacho.git
        cd baspacho
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBLA_STATIC=ON \
          -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc \
          -DBUILD_SHARED_LIBS=OFF -DBASPACHO_CUDA_ARCHS='detect' \
          -DBASPACHO_BUILD_TESTS=OFF -DBASPACHO_BUILD_EXAMPLES=OFF
        cmake --build build -- -j16

setup_project: &setup_project
  - run:
      name: Setting up project
      working_directory: ~/project
      command: |
        pip install -r requirements/dev.txt
        BASPACHO_ROOT_DIR=~/baspacho pip install --progress-bar off -e .

run_pre_commit: &run_pre_commit
  - run:
      name: Running precommit checks
      working_directory: ~/project
      command: |
        pip install pre-commit
        BASPACHO_ROOT_DIR=~/baspacho pip install -e ".[dev]"
        pre-commit install-hooks
        pre-commit run --all-files

run_optimizer_tests: &run_optimizer_tests
  - run:
      name: Running end to end tests
      working_directory: ~/project
      command: |
        BASPACHO_ROOT_DIR=~/baspacho pip install -e ".[dev]"
        python -m pytest tests/optimizer -m "not cudaext"
        python -m pytest tests/test_theseus_layer.py -m "not cudaext"

run_lie_group_tests: &run_lie_group_tests
  - run:
      name: Running Lie Groups tests
      working_directory: ~/project
      command: |
        pip install -e ".[dev]"
        python -m pytest tests/geometry -m "not cudaext" 
        python -m pytest tests/labs/lie -m "not cudaext" 

run_other_unit_tests: &run_other_unit_tests
  - run:
      name: Running other tests (all except optimizer-based and Lie groups)
      working_directory: ~/project
      command: |
        pip install -e ".[dev]"
        python -m pytest tests -m "not cudaext" --ignore=tests/geometry/ --ignore=tests/optimizer --ignore-glob=tests/test_theseus_layer.py --ignore=tests/labs/lie

run_gpu_tests: &run_gpu_tests
  - run:
      name: Running tests
      working_directory: ~/project
      command: |
        pytest -s tests/test_theseus_layer.py
        pytest -s tests -m "cudaext"

build_cuda11_wheel: &build_cuda11_wheel
  - run:
      name: Building wheel for CUDA 11
      working_directory: /home/circleci
      command: |
        THESEUS_GIT_COMMIT=$(git --git-dir project/.git log --format="%H" -n 1)
        THESEUS_VERSION=$(grep -Eo  "[0-9].[0-9].[0-9][.0-9a-z]*" project/theseus/__init__.py)
        ./project/build_scripts/build_wheel.sh . ${THESEUS_GIT_COMMIT} 11.6 ${THESEUS_VERSION}
        source ~/conda/bin/activate theseus
        pip install $(ls */*.whl)
        pip install -r project/requirements/dev.txt

run_tests_from_wheel: &run_tests_from_wheel
  - run:
      name: Installing theseus from wheel and running tests
      working_directory: ~/project
      command: |
          mv theseus theseus_tmp
          source ~/conda/bin/activate theseus
          python -m pytest tests/test_theseus_layer.py
          pytest -s tests -m "cudaext"


# -------------------------------------------------------------------------------------
# Jobs
# -------------------------------------------------------------------------------------
# ------- CPU only jobs -------
# Yes, this is horribly redundant. Too lazy to make sense of CircleCI's parameterize 
# stuff. Might fix when it gets too awful
jobs:
  # Pre-commit tests
  py38_precommit:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *build_baspacho_cpu
      - <<: *run_pre_commit

  py39_precommit:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *build_baspacho_cpu
      - <<: *run_pre_commit

  py310_precommit:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *build_baspacho_cpu
      - <<: *run_pre_commit

  # End-to-end tests
  py38_optimizer_tests:
    docker:
      - image: cimg/python:3.8
    resource_class: xlarge
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *build_baspacho_cpu
      - <<: *run_optimizer_tests

  py39_optimizer_tests:
    docker:
      - image: cimg/python:3.9
    resource_class: xlarge
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *build_baspacho_cpu
      - <<: *run_optimizer_tests

  py310_optimizer_tests:
    docker:
      - image: cimg/python:3.10
    resource_class: xlarge
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *build_baspacho_cpu
      - <<: *run_optimizer_tests

  # Lie group tests
  py38_lie_tests:
    docker:
      - image: cimg/python:3.8
    resource_class: xlarge
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *run_lie_group_tests

  py39_lie_tests:
    docker:
      - image: cimg/python:3.9
    resource_class: xlarge
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *run_lie_group_tests

  py310_lie_tests:
    docker:
      - image: cimg/python:3.10
    resource_class: xlarge
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *run_lie_group_tests

  # Other unit tests
  py38_other_unit_tests:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *run_other_unit_tests

  py39_other_unit_tests:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *run_other_unit_tests

  py310_other_unit_tests:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - <<: *install_suitesparse
      - <<: *install_torch
      - <<: *run_other_unit_tests

# ------- GPU only jobs -------
  unittests_gpu17_cuda10:
    executor: gpu_cuda10
    steps:
      - checkout
      - <<: *update_and_install_python
      - <<: *install_suitesparse
      - <<: *setup_cuda10_libs
      - <<: *setup_environment
      - <<: *install_torch_cuda10
      - <<: *install_functorch_021
      - <<: *install_recent_cmake_2004
      - <<: *build_baspacho_cuda
      - <<: *setup_project
      - <<: *run_gpu_tests

  unittests_gpu17_cuda11:
    executor: gpu_cuda11
    steps:
      - checkout
      - <<: *update_and_install_python
      - <<: *install_suitesparse
      - <<: *setup_cuda11_libs
      - <<: *setup_environment
      - <<: *install_torch_cuda11
      - <<: *install_recent_cmake_2004
      - <<: *build_baspacho_cuda
      - <<: *setup_project
      - <<: *run_gpu_tests

# ------- Compiled wheel test -------
  test_cuda11_wheel:
    executor: gpu_cuda11
    steps:
      - checkout
      - <<: *update_and_install_conda
      - <<: *install_suitesparse
      - <<: *setup_cuda11_libs
      - <<: *setup_environment_310
      - <<: *build_cuda11_wheel
      - <<: *run_tests_from_wheel



workflows:
  version: 2
  build:
    jobs:
      - unittests_gpu17_cuda10
      - unittests_gpu17_cuda11
      - test_cuda11_wheel
      - py38_precommit
      - py39_precommit
      - py310_precommit
      - py38_optimizer_tests
      - py39_optimizer_tests
      - py310_optimizer_tests
      - py38_lie_tests
      - py39_lie_tests
      - py310_lie_tests
      - py38_other_unit_tests
      - py39_other_unit_tests
      - py310_other_unit_tests
